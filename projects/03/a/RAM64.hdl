// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Specify which Ram8 chip should be loaded
    DMux8Way(in=load, sel=address[0..2], a=ram0load, b=ram1load, c=ram2load, d=ram3load, e=ram4load, f=ram5load, g=ram6load, h=ram7load);

    // Wire up the ram8 chips
    RAM8(in=in, load=ram0load, address=address[3..5], out=ram0Out);
    RAM8(in=in, load=ram1load, address=address[3..5], out=ram1Out);
    RAM8(in=in, load=ram2load, address=address[3..5], out=ram2Out);
    RAM8(in=in, load=ram3load, address=address[3..5], out=ram3Out);
    RAM8(in=in, load=ram4load, address=address[3..5], out=ram4Out);
    RAM8(in=in, load=ram5load, address=address[3..5], out=ram5Out);
    RAM8(in=in, load=ram6load, address=address[3..5], out=ram6Out);
    RAM8(in=in, load=ram7load, address=address[3..5], out=ram7Out);

    // Select the right output
    Mux8Way16(a=ram0Out, b=ram1Out, c=ram2Out, d=ram3Out, e=ram4Out, f=ram5Out, g=ram6Out, h=ram7Out, sel=address[0..2], out=out);
}
